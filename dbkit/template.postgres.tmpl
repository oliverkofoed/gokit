type {{ .GoLowerTableName }}PostgresDriver struct {
	table *{{ .GoTableName }}Table
	db *sql.DB
}

func (d *{{ .GoLowerTableName }}PostgresDriver) execute(ctx context.Context, query string, args ...interface{}) error {
	if ctx == nil {
		ctx = context.Background()
	}
	{{ if .Logging -}}
	ctx, done := logkit.Operation(ctx,"pg.sql", logkit.String("sql",query))
	defer done()
	{{- end }}

	_, err := d.db.ExecContext(ctx,query,args...);
	return err
}

func (d *{{ .GoLowerTableName }}PostgresDriver) insert(ctx context.Context, {{range $i, $c := .NonAutoIDColumns}}{{if $i}}, {{end}}{{$c.GoLowerName}} {{$c.GoType}}{{end}}) (*{{ .StructName }}, error) {
	if ctx == nil {
		ctx = context.Background()
	}

	item := {{ .StructName }}{
		driver:      d,
		{{ range .NonAutoIDColumns }}{{.GoName}}:      {{.GoLowerName}},
		{{ end }}
		{{ range .NonAutoIDColumns }}load{{.GoName}}:      {{.GoLowerName}},
		{{ end }}
	}

	if d.table.BeforeInsert != nil {
		err := d.table.BeforeInsert(ctx, &item)
		if err != nil {
			return nil, fmt.Errorf("BeforeInsert error: %v", err)
		}
	}

	{{ if .AutoIDColumn }}
	sql := "insert into {{ .DBTableName }}({{range $i, $c := .NonAutoIDColumns}}{{if $i}}, {{end}}{{$c.DBName}}{{end}}) values ({{range $i, $c := .NonAutoIDColumns}}{{if $i}}, {{end}}${{$i | plusone}}{{end}}) returning {{.AutoIDColumn.DBName}}"
	{{ if .Logging -}}
	ctx, done := logkit.Operation(ctx,"pg.sql", logkit.String("sql",sql))
	defer done()
	{{- end }}
	var newID int64
	err := d.db.QueryRowContext(ctx,sql{{range .NonAutoIDColumns}}, {{if .IsArray}}pq.Array({{end}}{{.GoLowerName}}{{if .IsArray}}){{end}}{{end}}).Scan(&newID)
	{{else}}
	sql := "insert into {{ .DBTableName }}({{range $i, $c := .NonAutoIDColumns}}{{if $i}}, {{end}}{{$c.DBName}}{{end}}) values ({{range $i, $c := .NonAutoIDColumns}}{{if $i}}, {{end}}${{$i | plusone}}{{end}})"
	{{ if .Logging -}}
	ctx, done := logkit.Operation(ctx,"pg.sql", logkit.String("sql",sql))
	defer done()
	{{- end }}
	_, err := d.db.ExecContext(ctx,sql{{range .NonAutoIDColumns}}, {{.GoLowerName}}{{end}})
	{{end}}
	if err != nil {
		return nil, err
	}

	{{ if .AutoIDColumn }}
	item.{{.AutoIDColumn.GoName}} = newID
	item.load{{.AutoIDColumn.GoName}} = newID
	{{ end }}

	if d.table.AfterInsert != nil {
		d.table.AfterInsert(ctx, &item)
	}

	return &item, nil
}

func (d *{{ .GoLowerTableName }}PostgresDriver) load(ctx context.Context, query string, args ...interface{}) (*{{ .StructName }}, error) {
	if ctx == nil {
		ctx = context.Background()
	}
	sql := "SELECT {{range $i, $c := .Columns}}{{if $i}}, {{end}}{{$c.DBName}}{{end}} from {{ .DBTableName }} where "+query
	{{ if .Logging -}}
	ctx, done := logkit.Operation(ctx,"pg.sql", logkit.String("sql",sql))
	defer done()
	{{- end }}
	rows, err := d.db.QueryContext(ctx,sql, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var item *{{ .StructName }}
	if rows.Next() {
		item = &{{ .StructName }}{}
		if err := d.scan(item, rows); err != nil {
			return nil, err
		}
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}

	return item, nil
}

func (d *{{ .GoLowerTableName }}PostgresDriver) delete(ctx context.Context, query string, args ...interface{}) error {
	if ctx == nil {
		ctx = context.Background()
	}
	sql := "delete from {{.DBTableName}} where "+query
	{{ if .Logging -}}
	ctx, done := logkit.Operation(ctx,"pg.sql", logkit.String("sql",sql))
	defer done()
	{{- end }}

	_, err := d.db.ExecContext(ctx,sql,args...);
	return err
}

func (d *{{ .GoLowerTableName }}PostgresDriver) scan(item *{{ .StructName }}, rows *sql.Rows) error {
	err := rows.Scan({{range $i, $c := .Columns}}{{if $i}}, {{end}}{{if $c.IsArray}}pq.Array({{end}}&item.{{$c.GoName}}{{if $c.IsArray}}){{end}}{{end}})
	if err != nil {
		return err
	}
	item.driver = d
	{{ range .Columns }}item.load{{.GoName}} = item.{{.GoName}}
	{{ end }}
	return nil
}

func (d *{{ .GoLowerTableName }}PostgresDriver) save(ctx context.Context, item *{{ .StructName }}) error {
	if d.table.BeforeUpdate != nil {
		err := d.table.BeforeUpdate(ctx, item)
		if err != nil {
			return fmt.Errorf("BeforeSave error: %v", err)
		}
	}

	sql, args := getSave{{.StructName}}SQL(item,1)

	// nothing changed
	if sql == "" {
		return nil
	}

	// execute
	{{ if .Logging -}}
	ctx, done := logkit.Operation(ctx,"pg.sql", logkit.String("sql",sql))
	defer done()
	{{- end }}

	if _, err := d.db.Exec(sql, args...); err != nil {
		return logkit.Error(ctx, "SQL Error", logkit.String("sql",sql), logkit.Err(err))
	}

	if d.table.AfterUpdate != nil {
		d.table.AfterUpdate(ctx, item)
	}

	// reset load variables.
	item.resetLoadVars()

	return nil
}

func getSave{{.StructName}}SQL(item *{{ .StructName }}, argOffset int) (string, []interface{}) {
	var sb bytes.Buffer
	sb.WriteString("update {{ .DBTableName }} set ")
	args := make([]interface{}, 0, {{ .Columns | len }} )

	{{ range .Columns }}
	if {{changed . "item." "item.load"}} {
		if len(args) != 0 {
			sb.WriteString(", ")
		}
		sb.WriteString("{{.DBName}}=$")
		sb.WriteString(strconv.FormatInt(int64(len(args)+argOffset), 10))
		args = append(args, {{if .IsArray}}pq.Array({{end}}item.{{.GoName}} {{if .IsArray}}){{end}})
	}
	{{ end }}

	if len(args) == 0 {
		return "", args
	}

	// where clause
	sb.WriteString(" where")
	{{ range $i, $v := .PrimaryIndex.Columns }}
	sb.WriteString("{{if gt $i 0}} and{{end}} {{$v.DBName}}=$")
	sb.WriteString(strconv.FormatInt(int64(len(args)+argOffset), 10))
	args = append(args, item.{{$v.GoName}})
	{{ end }}

	return sb.String(), args
}

func (i *{{.StructName}}) resetLoadVars(){
	{{ range .Columns }}i.load{{.GoName}} = i.{{.GoName}}
	{{ end }}
}

func (d *{{ .GoLowerTableName }}PostgresDriver) queryCount(ctx context.Context, query *{{ .StructName }}Query) (int64, error) {
	var sb bytes.Buffer
	sb.WriteString("Select count(*) from {{ .DBTableName }}")
	if query.whereQuery != "" {
		sb.WriteString(" WHERE ")
		sb.WriteString(query.whereQuery)
	}
	sql := sb.String()
	{{ if .Logging -}}
	ctx, done := logkit.Operation(ctx,"pg.sql", logkit.String("sql",sql))
	defer done()
	{{- end }}
	rows, err := d.db.Query(sql, query.args...)
	if err != nil {
		return 0, err
	}
	defer rows.Close()

	count := int64(0)
	if rows.Next() {
		if err := rows.Scan(&count); err != nil {
			return 0, err
		}
	}
	if err := rows.Err(); err != nil {
		return 0, err
	}

	return count, nil
}

func (d *{{ .GoLowerTableName }}PostgresDriver) queryFirst(ctx context.Context, query *{{ .StructName }}Query) (*{{ .StructName }}, error) {
	sql := d.querySQL(query)
	{{ if .Logging -}}
	ctx, done := logkit.Operation(ctx,"pg.sql", logkit.String("sql",sql))
	defer done()
	{{- end }}
	rows, err := d.db.Query(sql, query.args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var item *{{ .StructName }}
	if rows.Next() {
		item = &{{ .StructName }}{}
		if err := d.scan(item, rows); err != nil {
			return nil, err
		}
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}

	return item, nil
}

func (d *{{ .GoLowerTableName }}PostgresDriver) querySlice(ctx context.Context, query *{{ .StructName }}Query, expectedSliceSize int) ([]*{{ .StructName }}, error) {
	sql := d.querySQL(query)
	{{ if .Logging -}}
	ctx, done := logkit.Operation(ctx,"pg.sql", logkit.String("sql",sql))
	defer done()
	{{- end }}

	rows, err := d.db.Query(sql, query.args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	result := make([]*{{ .StructName }}, 0, expectedSliceSize)
	for rows.Next() {
		item := &{{ .StructName }}{}
		if err := d.scan(item, rows); err != nil {
			return nil, err
		}
		result = append(result, item)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}

	return result, nil
}

func (d *{{ .GoLowerTableName }}PostgresDriver) queryEach(ctx context.Context, query *{{ .StructName }}Query, reuseItem bool, action func(*{{ .StructName }}) error) error {
	sql := d.querySQL(query)
	{{ if .Logging -}}
	ctx, done := logkit.Operation(ctx,"pg.sql", logkit.String("sql",sql))
	defer done()
	{{- end }}

	rows, err := d.db.Query(sql, query.args...)
	if err != nil {
		return err
	}
	defer rows.Close()

	var item *{{ .StructName }}
	for rows.Next() {
		if item == nil || !reuseItem {
			item = &{{ .StructName }}{}
		}

		if err := d.scan(item, rows); err != nil {
			return err
		}

		if err := action(item); err != nil {
			return err
		}
	}
	if err := rows.Err(); err != nil {
		return err
	}

	return nil
}

func (d *{{ .GoLowerTableName }}PostgresDriver) querySQL(query *{{ .StructName }}Query) string {
	var sb bytes.Buffer

	sb.WriteString("Select {{range $i, $c := .Columns}}{{if $i}}, {{end}}{{$c.DBName}}{{end}} from {{ .DBTableName }}")

	if query.whereQuery != "" {
		sb.WriteString(" WHERE ")
		sb.WriteString(query.whereQuery)
	}
	if len(query.orderColumns) > 0 {
		sb.WriteString(" ORDER BY ")
		for i, col := range query.orderColumns {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(col)
			if query.orderDirection[i] == 1 {
				sb.WriteString(" ASC")
			}else{
				sb.WriteString(" DESC")
			}
		}

	}
	if query.limit > 0 {
		sb.WriteString(" LIMIT ")
		sb.WriteString(strconv.FormatInt(int64(query.limit), 10))
	}
	if query.offset > 0 {
		sb.WriteString(" OFFSET ")
		sb.WriteString(strconv.FormatInt(int64(query.offset), 10))
	}

	return sb.String()
}

{{ range .IndexCombinations }}
func (d *{{ .Table.GoLowerTableName }}PostgresDriver) loadBy{{.Name}}(ctx context.Context, {{.FuncArgs}}) (*{{ .Table.StructName }}, error) {
	return d.load(ctx,"{{range $i, $c := .Columns}}{{if $i}} and {{end}}{{$c.DBName}}=${{$i | plusone}}{{end}}", {{.CallArgs}})
}

func (d *{{ .Table.GoLowerTableName }}PostgresDriver) findBy{{.Name}}({{.FuncArgs}}) *{{ .Table.StructName }}Query {
	q :=&{{ .Table.StructName }}Query{driver: d}
	q.Where("{{range $i, $c := .Columns}}{{if $i}} and {{end}}{{$c.DBName}}=${{$i | plusone}}{{end}}", {{.CallArgs}})
	return q
}

func (d *{{ .Table.GoLowerTableName }}PostgresDriver) deleteBy{{.Name}}(ctx context.Context, {{.FuncArgs}}) error {
	return d.delete(ctx,"{{range $i, $c := .Columns}}{{if $i}} and {{end}}{{$c.DBName}}=${{$i | plusone}}{{end}}", {{.CallArgs}})
}
{{end}}
