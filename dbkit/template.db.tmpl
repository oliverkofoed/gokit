package {{.Schema.PackageName}}

{{.Imports}}

var Main *DB

// DB is the main access point to the database
type DB struct {
	Connection interface{}
	newBatch func() Batch
{{range .Schema.Tables}}	{{.GoTableName}} *{{.GoTableName}}Table
{{end}}}

// NewDB creates a new DB pointer to access a database
func NewDB(driverName, dataSourceName string) (*DB, error) {
	switch(driverName){
	{{range $generator := .Generators }}
		{{ if (eq $generator "cassandra") }} 
		case "cassandra":
			u, err := url.Parse(dataSourceName)
			if err != nil {
				return nil, err
			}
			cluster := gocql.NewCluster(u.Host)
			if u.Query().Get("DisableInitialHostLookup") == "true" {
				cluster.DisableInitialHostLookup = true
			}
			if u.Query().Get("IgnorePeerAddr") == "true" {
				cluster.IgnorePeerAddr = true
			}
			cluster.Keyspace = u.Path[1:]

			db, err := cluster.CreateSession()
			if err != nil {
				return nil, err
			}

			result :=  &DB{
				Connection: db,
				newBatch:func() Batch{return &cassandraBatch{db:db, cqlBatch: gocql.NewBatch(gocql.LoggedBatch)}},
			{{range $.Schema.Tables}}	{{.GoTableName}}: &{{.GoTableName}}Table{driver: &{{.GoLowerTableName}}CassandraDriver{db: db}},
			{{end}}}
			{{range $.Schema.Tables}}result.{{.GoTableName}}.driver.(*{{.GoLowerTableName}}CassandraDriver).table = result.{{.GoTableName}}
			{{end}}
			
			return result, nil
		{{else}}
		case "postgres":
			db, err := sql.Open(driverName, dataSourceName)
			if err != nil {
				return nil, err
			}

			result := &DB{
				Connection: db,
				newBatch:func() Batch{return &postgresBatch{db:db}},
			{{range $.Schema.Tables}}	{{.GoTableName}}: &{{.GoTableName}}Table{driver: &{{.GoLowerTableName}}PostgresDriver{db: db}},
			{{end}}}
			{{range $.Schema.Tables}}result.{{.GoTableName}}.driver.(*{{.GoLowerTableName}}PostgresDriver).table = result.{{.GoTableName}}
			{{end}}

			return result, nil
			{{end}}
	{{end}}
		default:
			return nil, errors.New("unknown database driver: " + driverName)
	}

}

type Batch interface {
	String() string
	Execute(ctx context.Context) error
	{{range $_, $t := .Schema.SortedTables}}
	{{range $_, $n := $.Generators}}{{if eq $n "cassandra"}}
	Insert{{$t.StructName}}TTL(ttl int64, {{range $i, $c := $t.NonAutoIDColumns}}{{if $i}}, {{end}}{{$c.GoLowerName}} {{$c.GoType}}{{end}})
	{{end}}{{end}}
	{{range $_, $n := $.Generators}}{{if eq $n "postgres"}}
	Upsert{{$t.StructName}}({{range $i, $c := $t.NonAutoIDColumns}}{{if $i}}, {{end}}{{$c.GoLowerName}} {{$c.GoType}}{{end}})
	{{end}}{{end}}
	Insert{{$t.StructName}}({{range $i, $c := $t.NonAutoIDColumns}}{{if $i}}, {{end}}{{$c.GoLowerName}} {{$c.GoType}}{{end}}) {{ range .IndexCombinations }}
	Delete{{.Table.StructName}}By{{.Name}}({{.FuncArgs}}){{end}}
	Save{{$t.StructName}}({{$t.LowerStructName}} *{{$t.StructName}}){{end}}

}

func (db *DB) NewBatch() Batch{
	return db.newBatch()
}

type loadVarResetable interface{
	resetLoadVars()
}

func panicWrap(err error) error {
	return err
}

